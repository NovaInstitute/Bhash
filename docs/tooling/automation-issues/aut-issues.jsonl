{"title": "AUT-001: Add ROBOT reasoning Makefile target", "body": "## Summary\nSet up a repeatable automation target that runs ROBOT reasoning over the core ontology module using the ELK reasoner.\n\n## Implementation Steps\n- Add a `reason-core` target to the repository's Makefile or Justfile that invokes `robot reason --reasoner ELK --input ontology/src/core.ttl --output build/core-reasoned.ttl`.\n- Ensure the target creates the `build/` directory as needed and confirm the directory is ignored by Git.\n- Document the reasoning command in `docs/tooling/toolchain.md` within the ROBOT workflow guidance so contributors know how to run it.\n\n## Definition of Done\n- Executing `make reason-core` (or `just reason-core`) succeeds locally and produces `build/core-reasoned.ttl`.\n- Repository documentation clearly explains how to use the reasoning target and where the output is written.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-001", "labels": ["automation"]}
{"title": "AUT-002: Provide ROBOT report for core module", "body": "## Summary\nExtend the automation workflow with a ROBOT report command so modelling errors in the core ontology are surfaced during local development and CI.\n\n## Implementation Steps\n- Introduce a `report-core` target that runs `robot report --input ontology/src/core.ttl --output build/reports/core-report.tsv`.\n- Ensure the automation or CI pipeline parses the report output and fails the build when `ERROR` entries are present.\n- Reference the automation capability from decision log entry D-0001 to maintain traceability for ROBOT adoption.\n\n## Definition of Done\n- Running the report command locally generates `build/reports/core-report.tsv` without manual setup steps beyond dependencies.\n- Documentation explains how to interpret the ROBOT report, especially how to respond to unsatisfiable classes or property violations.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-002", "labels": ["automation"]}
{"title": "AUT-003: Scaffold ROBOT template workflow", "body": "## Summary\nProvide an example ROBOT template workflow that demonstrates how CSV inputs can generate ontology modules for contributors.\n\n## Implementation Steps\n- Add sample files under `templates/` (for example `templates/example.csv` and an accompanying ontology mapping file) that illustrate how module rows map to generated terms.\n- Create a Makefile target such as `template-example` that runs `robot template --template templates/example.csv --output build/templates/example.ttl`.\n- Update `docs/tooling/toolchain.md` (and relevant module READMEs) with guidance on how to use the template workflow.\n\n## Definition of Done\n- The sample template renders successfully and the generated Turtle output is excluded from version control but referenced in documentation.\n- Onboarding materials direct contributors to the example workflow when creating new modules.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-003", "labels": ["automation"]}
{"title": "AUT-004: Introduce reusable SHACL validation script", "body": "## Summary\nEstablish a reusable SHACL validation harness so ontology shapes in `ontology/shapes/` can be executed against sample data during development and CI.\n\n## Implementation Steps\n- Add a script (for example `scripts/run-shacl.py`) that invokes `pyshacl` over shapes in `ontology/shapes/` using fixtures in `tests/fixtures/`.\n- Provide a Makefile target `shacl` that prepares any required Python environment or virtual environment and runs the validation script.\n- Document the environment setup (pip requirements, virtualenv activation) in `docs/tooling/toolchain.md` and confirm compatibility with competency question validation tasks.\n\n## Definition of Done\n- The validation command exits with a non-zero status when SHACL validation fails and can run in CI without manual configuration.\n- Documentation explains how contributors should add new shapes and sample data for validation.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-004", "labels": ["automation"]}
{"title": "AUT-005: Configure SPARQL regression harness", "body": "## Summary\nBuild a SPARQL regression suite that can execute queries against prepared datasets so analytic expectations are enforced automatically.\n\n## Implementation Steps\n- Create a `tests/queries/` directory with an initial query (for example `smoke-test.rq`) and expected results stored under `tests/fixtures/`.\n- Provide a shell or Python wrapper (e.g., `scripts/run-sparql.sh`) that uses Apache Jena `arq` or an equivalent tool to execute all queries against fixture datasets.\n- Wire the wrapper into the Makefile (for instance `make sparql`) and ensure it produces per-query exit codes suitable for CI gating.\n\n## Definition of Done\n- Running the wrapper locally processes every `.rq` file and compares results to fixtures, failing when discrepancies occur.\n- Documentation describes how to add new regression queries, especially those that support competency question validation.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-005", "labels": ["automation"]}
{"title": "AUT-006: Add ontology documentation build pipeline", "body": "## Summary\nAutomate the generation of browsable ontology documentation so contributors can review module content without manual tooling.\n\n## Implementation Steps\n- Evaluate `robot export` versus Widoco for documentation generation and capture the tooling decision in `docs/decisions/log.md` if a change is required.\n- Add a Makefile target `docs` that emits HTML into `build/docs/` covering the core and service-specific ontology modules.\n- Update `.gitignore` to exclude generated documentation and note publication expectations (e.g., GitHub Pages) in `docs/tooling/toolchain.md`.\n\n## Definition of Done\n- Running the documentation target locally produces HTML artefacts that can be reviewed or published as part of a release process.\n- CI planning covers when the documentation build should run and how artefacts are shared or published.\n\n## References\n- docs/tooling/automation-requirements.md §AUT-006", "labels": ["automation"]}
